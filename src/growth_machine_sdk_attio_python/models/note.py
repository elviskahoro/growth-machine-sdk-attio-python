"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from growth_machine_sdk_attio_python.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing_extensions import NotRequired, TypedDict


class NoteIDTypedDict(TypedDict):
    workspace_id: str
    r"""The ID of the workspace the note belongs to."""
    note_id: str
    r"""The ID of the note."""


class NoteID(BaseModel):
    workspace_id: str
    r"""The ID of the workspace the note belongs to."""

    note_id: str
    r"""The ID of the note."""


class NoteType(str, Enum):
    r"""The type of actor. [Read more information on actor types here](/docs/actors)."""

    API_TOKEN = "api-token"
    WORKSPACE_MEMBER = "workspace-member"
    SYSTEM = "system"
    APP = "app"


class NoteCreatedByActorTypedDict(TypedDict):
    r"""The actor that created this note."""

    id: NotRequired[Nullable[str]]
    r"""An ID to identify the actor."""
    type: NotRequired[Nullable[NoteType]]
    r"""The type of actor. [Read more information on actor types here](/docs/actors)."""


class NoteCreatedByActor(BaseModel):
    r"""The actor that created this note."""

    id: OptionalNullable[str] = UNSET
    r"""An ID to identify the actor."""

    type: OptionalNullable[NoteType] = UNSET
    r"""The type of actor. [Read more information on actor types here](/docs/actors)."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["id", "type"]
        nullable_fields = ["id", "type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class NoteTypedDict(TypedDict):
    id: NoteIDTypedDict
    parent_object: str
    r"""The slug or ID of the parent object the note belongs to."""
    parent_record_id: str
    r"""The ID of the parent record the note belongs to."""
    title: str
    r"""The note title. The title is plaintext only and has no formatting."""
    content_plaintext: str
    r"""The plaintext representation of the note content. The line feed character `\n` represents new lines within the note content."""
    content_markdown: str
    r"""The markdown representation of the note content with formatting applied based on block types and styles."""
    created_by_actor: NoteCreatedByActorTypedDict
    r"""The actor that created this note."""
    created_at: str
    r"""When the note was created."""


class Note(BaseModel):
    id: NoteID

    parent_object: str
    r"""The slug or ID of the parent object the note belongs to."""

    parent_record_id: str
    r"""The ID of the parent record the note belongs to."""

    title: str
    r"""The note title. The title is plaintext only and has no formatting."""

    content_plaintext: str
    r"""The plaintext representation of the note content. The line feed character `\n` represents new lines within the note content."""

    content_markdown: str
    r"""The markdown representation of the note content with formatting applied based on block types and styles."""

    created_by_actor: NoteCreatedByActor
    r"""The actor that created this note."""

    created_at: str
    r"""When the note was created."""
