"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .attribute import Attribute, AttributeTypedDict
from enum import Enum
from growth_machine_sdk_attio_python.types import BaseModel
from growth_machine_sdk_attio_python.utils import FieldMetadata, PathParamMetadata
from typing_extensions import Annotated, TypedDict


class GetV2TargetIdentifierAttributesAttributeTarget(str, Enum):
    r"""Whether the attribute is on an object or a list."""

    OBJECTS = "objects"
    LISTS = "lists"


class GetV2TargetIdentifierAttributesAttributeRequestTypedDict(TypedDict):
    target: GetV2TargetIdentifierAttributesAttributeTarget
    r"""Whether the attribute is on an object or a list."""
    identifier: str
    attribute: str


class GetV2TargetIdentifierAttributesAttributeRequest(BaseModel):
    target: Annotated[
        GetV2TargetIdentifierAttributesAttributeTarget,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Whether the attribute is on an object or a list."""

    identifier: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    attribute: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]


class GetV2TargetIdentifierAttributesAttributeType(str, Enum):
    INVALID_REQUEST_ERROR = "invalid_request_error"


class GetV2TargetIdentifierAttributesAttributeCode(str, Enum):
    NOT_FOUND = "not_found"


class GetV2TargetIdentifierAttributesAttributeResponseTypedDict(TypedDict):
    r"""Success"""

    data: AttributeTypedDict


class GetV2TargetIdentifierAttributesAttributeResponse(BaseModel):
    r"""Success"""

    data: Attribute
