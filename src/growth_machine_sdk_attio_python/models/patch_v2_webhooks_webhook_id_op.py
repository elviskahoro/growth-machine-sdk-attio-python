"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from growth_machine_sdk_attio_python.types import BaseModel, Nullable, UNSET_SENTINEL
from growth_machine_sdk_attio_python.utils import (
    FieldMetadata,
    PathParamMetadata,
    RequestMetadata,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class PatchV2WebhooksWebhookIDEventTypeRequest(str, Enum):
    r"""Type of event the webhook is subscribed to."""

    COMMENT_CREATED = "comment.created"
    COMMENT_RESOLVED = "comment.resolved"
    COMMENT_UNRESOLVED = "comment.unresolved"
    COMMENT_DELETED = "comment.deleted"
    LIST_CREATED = "list.created"
    LIST_UPDATED = "list.updated"
    LIST_DELETED = "list.deleted"
    LIST_ATTRIBUTE_CREATED = "list-attribute.created"
    LIST_ATTRIBUTE_UPDATED = "list-attribute.updated"
    LIST_ENTRY_CREATED = "list-entry.created"
    LIST_ENTRY_UPDATED = "list-entry.updated"
    LIST_ENTRY_DELETED = "list-entry.deleted"
    OBJECT_ATTRIBUTE_CREATED = "object-attribute.created"
    OBJECT_ATTRIBUTE_UPDATED = "object-attribute.updated"
    NOTE_CREATED = "note.created"
    NOTE_UPDATED = "note.updated"
    NOTE_DELETED = "note.deleted"
    RECORD_CREATED = "record.created"
    RECORD_MERGED = "record.merged"
    RECORD_UPDATED = "record.updated"
    RECORD_DELETED = "record.deleted"
    TASK_CREATED = "task.created"
    TASK_UPDATED = "task.updated"
    TASK_DELETED = "task.deleted"
    WORKSPACE_MEMBER_CREATED = "workspace-member.created"


class PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsRequest(str, Enum):
    NOT_EQUALS = "not_equals"


class PatchV2WebhooksWebhookIDDollarAndNotEqualsRequestTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsRequest
    value: str


class PatchV2WebhooksWebhookIDDollarAndNotEqualsRequest(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsRequest

    value: str


class PatchV2WebhooksWebhookIDDollarAndOperatorEqualsRequest(str, Enum):
    EQUALS = "equals"


class PatchV2WebhooksWebhookIDDollarAndEqualsRequestTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarAndOperatorEqualsRequest
    value: str


class PatchV2WebhooksWebhookIDDollarAndEqualsRequest(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarAndOperatorEqualsRequest

    value: str


PatchV2WebhooksWebhookIDDollarAndRequestUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarAndRequestUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDDollarAndEqualsRequestTypedDict,
        PatchV2WebhooksWebhookIDDollarAndNotEqualsRequestTypedDict,
    ],
)


PatchV2WebhooksWebhookIDDollarAndRequestUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarAndRequestUnion",
    Union[
        PatchV2WebhooksWebhookIDDollarAndEqualsRequest,
        PatchV2WebhooksWebhookIDDollarAndNotEqualsRequest,
    ],
)


class PatchV2WebhooksWebhookIDFilterRequest2TypedDict(TypedDict):
    dollar_and: List[PatchV2WebhooksWebhookIDDollarAndRequestUnionTypedDict]


class PatchV2WebhooksWebhookIDFilterRequest2(BaseModel):
    dollar_and: Annotated[
        List[PatchV2WebhooksWebhookIDDollarAndRequestUnion],
        pydantic.Field(alias="$and"),
    ]


class PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsRequest(str, Enum):
    NOT_EQUALS = "not_equals"


class PatchV2WebhooksWebhookIDDollarOrNotEqualsRequestTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsRequest
    value: str


class PatchV2WebhooksWebhookIDDollarOrNotEqualsRequest(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsRequest

    value: str


class PatchV2WebhooksWebhookIDDollarOrOperatorEqualsRequest(str, Enum):
    EQUALS = "equals"


class PatchV2WebhooksWebhookIDDollarOrEqualsRequestTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarOrOperatorEqualsRequest
    value: str


class PatchV2WebhooksWebhookIDDollarOrEqualsRequest(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarOrOperatorEqualsRequest

    value: str


PatchV2WebhooksWebhookIDDollarOrRequestUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarOrRequestUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDDollarOrEqualsRequestTypedDict,
        PatchV2WebhooksWebhookIDDollarOrNotEqualsRequestTypedDict,
    ],
)


PatchV2WebhooksWebhookIDDollarOrRequestUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarOrRequestUnion",
    Union[
        PatchV2WebhooksWebhookIDDollarOrEqualsRequest,
        PatchV2WebhooksWebhookIDDollarOrNotEqualsRequest,
    ],
)


class PatchV2WebhooksWebhookIDFilterRequest1TypedDict(TypedDict):
    dollar_or: List[PatchV2WebhooksWebhookIDDollarOrRequestUnionTypedDict]


class PatchV2WebhooksWebhookIDFilterRequest1(BaseModel):
    dollar_or: Annotated[
        List[PatchV2WebhooksWebhookIDDollarOrRequestUnion], pydantic.Field(alias="$or")
    ]


PatchV2WebhooksWebhookIDFilterRequestUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDFilterRequestUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDFilterRequest1TypedDict,
        PatchV2WebhooksWebhookIDFilterRequest2TypedDict,
    ],
)
r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


PatchV2WebhooksWebhookIDFilterRequestUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDFilterRequestUnion",
    Union[
        PatchV2WebhooksWebhookIDFilterRequest1, PatchV2WebhooksWebhookIDFilterRequest2
    ],
)
r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


class PatchV2WebhooksWebhookIDSubscriptionRequestTypedDict(TypedDict):
    event_type: PatchV2WebhooksWebhookIDEventTypeRequest
    r"""Type of event the webhook is subscribed to."""
    filter_: Nullable[PatchV2WebhooksWebhookIDFilterRequestUnionTypedDict]
    r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


class PatchV2WebhooksWebhookIDSubscriptionRequest(BaseModel):
    event_type: PatchV2WebhooksWebhookIDEventTypeRequest
    r"""Type of event the webhook is subscribed to."""

    filter_: Annotated[
        Nullable[PatchV2WebhooksWebhookIDFilterRequestUnion],
        pydantic.Field(alias="filter"),
    ]
    r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["filter"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PatchV2WebhooksWebhookIDDataRequestTypedDict(TypedDict):
    target_url: NotRequired[str]
    r"""URL where the webhook events will be delivered to."""
    subscriptions: NotRequired[
        List[PatchV2WebhooksWebhookIDSubscriptionRequestTypedDict]
    ]
    r"""One or more events the webhook is subscribed to."""


class PatchV2WebhooksWebhookIDDataRequest(BaseModel):
    target_url: Optional[str] = None
    r"""URL where the webhook events will be delivered to."""

    subscriptions: Optional[List[PatchV2WebhooksWebhookIDSubscriptionRequest]] = None
    r"""One or more events the webhook is subscribed to."""


class PatchV2WebhooksWebhookIDRequestBodyTypedDict(TypedDict):
    data: PatchV2WebhooksWebhookIDDataRequestTypedDict


class PatchV2WebhooksWebhookIDRequestBody(BaseModel):
    data: PatchV2WebhooksWebhookIDDataRequest


class PatchV2WebhooksWebhookIDRequestTypedDict(TypedDict):
    webhook_id: str
    request_body: PatchV2WebhooksWebhookIDRequestBodyTypedDict


class PatchV2WebhooksWebhookIDRequest(BaseModel):
    webhook_id: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    request_body: Annotated[
        PatchV2WebhooksWebhookIDRequestBody,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]


class PatchV2WebhooksWebhookIDType(str, Enum):
    INVALID_REQUEST_ERROR = "invalid_request_error"


class PatchV2WebhooksWebhookIDCode(str, Enum):
    NOT_FOUND = "not_found"


class PatchV2WebhooksWebhookIDEventTypeResponse(str, Enum):
    r"""Type of event the webhook is subscribed to."""

    COMMENT_CREATED = "comment.created"
    COMMENT_RESOLVED = "comment.resolved"
    COMMENT_UNRESOLVED = "comment.unresolved"
    COMMENT_DELETED = "comment.deleted"
    LIST_CREATED = "list.created"
    LIST_UPDATED = "list.updated"
    LIST_DELETED = "list.deleted"
    LIST_ATTRIBUTE_CREATED = "list-attribute.created"
    LIST_ATTRIBUTE_UPDATED = "list-attribute.updated"
    LIST_ENTRY_CREATED = "list-entry.created"
    LIST_ENTRY_UPDATED = "list-entry.updated"
    LIST_ENTRY_DELETED = "list-entry.deleted"
    OBJECT_ATTRIBUTE_CREATED = "object-attribute.created"
    OBJECT_ATTRIBUTE_UPDATED = "object-attribute.updated"
    NOTE_CREATED = "note.created"
    NOTE_UPDATED = "note.updated"
    NOTE_DELETED = "note.deleted"
    RECORD_CREATED = "record.created"
    RECORD_MERGED = "record.merged"
    RECORD_UPDATED = "record.updated"
    RECORD_DELETED = "record.deleted"
    TASK_CREATED = "task.created"
    TASK_UPDATED = "task.updated"
    TASK_DELETED = "task.deleted"
    WORKSPACE_MEMBER_CREATED = "workspace-member.created"


class PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsResponse(str, Enum):
    NOT_EQUALS = "not_equals"


class PatchV2WebhooksWebhookIDDollarAndNotEqualsResponseTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsResponse
    value: str


class PatchV2WebhooksWebhookIDDollarAndNotEqualsResponse(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarAndOperatorNotEqualsResponse

    value: str


class PatchV2WebhooksWebhookIDDollarAndOperatorEqualsResponse(str, Enum):
    EQUALS = "equals"


class PatchV2WebhooksWebhookIDDollarAndEqualsResponseTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarAndOperatorEqualsResponse
    value: str


class PatchV2WebhooksWebhookIDDollarAndEqualsResponse(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarAndOperatorEqualsResponse

    value: str


PatchV2WebhooksWebhookIDDollarAndResponseUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarAndResponseUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDDollarAndEqualsResponseTypedDict,
        PatchV2WebhooksWebhookIDDollarAndNotEqualsResponseTypedDict,
    ],
)


PatchV2WebhooksWebhookIDDollarAndResponseUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarAndResponseUnion",
    Union[
        PatchV2WebhooksWebhookIDDollarAndEqualsResponse,
        PatchV2WebhooksWebhookIDDollarAndNotEqualsResponse,
    ],
)


class PatchV2WebhooksWebhookIDFilterResponse2TypedDict(TypedDict):
    dollar_and: List[PatchV2WebhooksWebhookIDDollarAndResponseUnionTypedDict]


class PatchV2WebhooksWebhookIDFilterResponse2(BaseModel):
    dollar_and: Annotated[
        List[PatchV2WebhooksWebhookIDDollarAndResponseUnion],
        pydantic.Field(alias="$and"),
    ]


class PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsResponse(str, Enum):
    NOT_EQUALS = "not_equals"


class PatchV2WebhooksWebhookIDDollarOrNotEqualsResponseTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsResponse
    value: str


class PatchV2WebhooksWebhookIDDollarOrNotEqualsResponse(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarOrOperatorNotEqualsResponse

    value: str


class PatchV2WebhooksWebhookIDDollarOrOperatorEqualsResponse(str, Enum):
    EQUALS = "equals"


class PatchV2WebhooksWebhookIDDollarOrEqualsResponseTypedDict(TypedDict):
    field: str
    operator: PatchV2WebhooksWebhookIDDollarOrOperatorEqualsResponse
    value: str


class PatchV2WebhooksWebhookIDDollarOrEqualsResponse(BaseModel):
    field: str

    operator: PatchV2WebhooksWebhookIDDollarOrOperatorEqualsResponse

    value: str


PatchV2WebhooksWebhookIDDollarOrResponseUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarOrResponseUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDDollarOrEqualsResponseTypedDict,
        PatchV2WebhooksWebhookIDDollarOrNotEqualsResponseTypedDict,
    ],
)


PatchV2WebhooksWebhookIDDollarOrResponseUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDDollarOrResponseUnion",
    Union[
        PatchV2WebhooksWebhookIDDollarOrEqualsResponse,
        PatchV2WebhooksWebhookIDDollarOrNotEqualsResponse,
    ],
)


class PatchV2WebhooksWebhookIDFilterResponse1TypedDict(TypedDict):
    dollar_or: List[PatchV2WebhooksWebhookIDDollarOrResponseUnionTypedDict]


class PatchV2WebhooksWebhookIDFilterResponse1(BaseModel):
    dollar_or: Annotated[
        List[PatchV2WebhooksWebhookIDDollarOrResponseUnion], pydantic.Field(alias="$or")
    ]


PatchV2WebhooksWebhookIDFilterResponseUnionTypedDict = TypeAliasType(
    "PatchV2WebhooksWebhookIDFilterResponseUnionTypedDict",
    Union[
        PatchV2WebhooksWebhookIDFilterResponse1TypedDict,
        PatchV2WebhooksWebhookIDFilterResponse2TypedDict,
    ],
)
r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


PatchV2WebhooksWebhookIDFilterResponseUnion = TypeAliasType(
    "PatchV2WebhooksWebhookIDFilterResponseUnion",
    Union[
        PatchV2WebhooksWebhookIDFilterResponse1, PatchV2WebhooksWebhookIDFilterResponse2
    ],
)
r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


class PatchV2WebhooksWebhookIDSubscriptionResponseTypedDict(TypedDict):
    event_type: PatchV2WebhooksWebhookIDEventTypeResponse
    r"""Type of event the webhook is subscribed to."""
    filter_: Nullable[PatchV2WebhooksWebhookIDFilterResponseUnionTypedDict]
    r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""


class PatchV2WebhooksWebhookIDSubscriptionResponse(BaseModel):
    event_type: PatchV2WebhooksWebhookIDEventTypeResponse
    r"""Type of event the webhook is subscribed to."""

    filter_: Annotated[
        Nullable[PatchV2WebhooksWebhookIDFilterResponseUnion],
        pydantic.Field(alias="filter"),
    ]
    r"""Filters to determine whether the webhook event should be sent. If null, the filter always passes."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["filter"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class PatchV2WebhooksWebhookIDIDTypedDict(TypedDict):
    workspace_id: str
    r"""The ID of the workspace the webhook belongs to."""
    webhook_id: str
    r"""The ID of the webhook."""


class PatchV2WebhooksWebhookIDID(BaseModel):
    workspace_id: str
    r"""The ID of the workspace the webhook belongs to."""

    webhook_id: str
    r"""The ID of the webhook."""


class PatchV2WebhooksWebhookIDStatus(str, Enum):
    r"""The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive."""

    ACTIVE = "active"
    DEGRADED = "degraded"
    INACTIVE = "inactive"


class PatchV2WebhooksWebhookIDDataResponseTypedDict(TypedDict):
    target_url: str
    r"""URL where the webhook events will be delivered to."""
    subscriptions: List[PatchV2WebhooksWebhookIDSubscriptionResponseTypedDict]
    r"""One or more events the webhook is subscribed to."""
    id: PatchV2WebhooksWebhookIDIDTypedDict
    status: PatchV2WebhooksWebhookIDStatus
    r"""The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive."""
    created_at: str
    r"""When the webhook was created."""


class PatchV2WebhooksWebhookIDDataResponse(BaseModel):
    target_url: str
    r"""URL where the webhook events will be delivered to."""

    subscriptions: List[PatchV2WebhooksWebhookIDSubscriptionResponse]
    r"""One or more events the webhook is subscribed to."""

    id: PatchV2WebhooksWebhookIDID

    status: PatchV2WebhooksWebhookIDStatus
    r"""The state of the webhook. Webhooks marked as active and degraded will receive events, inactive ones will not. If a webhook remains in the degraded state for 7 days, it will be marked inactive."""

    created_at: str
    r"""When the webhook was created."""


class PatchV2WebhooksWebhookIDResponseTypedDict(TypedDict):
    r"""Success"""

    data: PatchV2WebhooksWebhookIDDataResponseTypedDict


class PatchV2WebhooksWebhookIDResponse(BaseModel):
    r"""Success"""

    data: PatchV2WebhooksWebhookIDDataResponse
